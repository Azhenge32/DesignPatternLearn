优点：
1、请求者和接受者松散耦合
在责任链模式中，请求者并不知道接受者是谁，也不知道具体如何处理
请求者只负责向责任链发出请求就可以了，而每个职责对象也不用管请求者或者是其他的
职责对象，只负责处理自己的部分，其他的就交给其他的职责对象去处理。也就是说，请求者和接受者
是完全接偶的。

2、动态组合职责
责任链模式会把功能处理分散到单独的职责对象中，然后在使用的时候，就可以动态组合职责形成职责链，
从而可以灵活地给对象分配职责，也可以灵活地实现和改变对象的职责。

缺点
1、产生许多细粒度对象
责任链模式会把功能处理分散到单独的职责对象中，也就是每个职责对象处理一个方面的功能，要把
一个业务处理完，需要许多职责对象的组合，这样会产生大量的细粒度职责对象。
2、不一定能被处理
责任链模式的每个职责对象只负责处理自己处理的那部分，因此可能会出现某个请求，把整个责任链传递完也没有职责对象处理它。这就需要在使用责任链的时候，需要提供默认的处理，并且注意构建链的有效性。



开发中的应用场景
Java中，异常机制就是一个责任链模式，一个try可以对应多个catch,当第一个catch不匹配类型，则自动跳到第二个catch.
Servlet开发中，过滤器的链式处理
Struct2中，拦截器的调用也是典型的责任链模式
MyBatis的拦截器链


相关模式
责任链和组合模式
两个模式可以组合使用

责任链和装饰者模式
两个模式相似，从某个角度讲，可以相互模拟实现对方的功能。
不同：一方面是目的不同，装饰者模式是要实现透明的为对象添加功能，而责任链模式是要实现发送者和接受者节藕；
另一方面，装饰者是无限递归调用的，也可以任意多个对象来装饰功能，但是责任链模式是有一个处理就结束（标准责任链模式）。

责任链和策略模式
两个模式可以组合使用