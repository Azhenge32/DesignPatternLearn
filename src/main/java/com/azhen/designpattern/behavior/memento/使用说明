所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。

角色
 Originator: 原发器。
    负责创建一个备忘录，用以记录当前对象的内部状态，通过也可以使用它来利用备忘录恢复内部状态。
    同时原发器还可以根据需要决定Memento存储Originator的那些内部状态。
 Memento: 备忘录。
    用于存储Originator的内部状态，并且可以防止Originator以外的对象访问Memento。
    在备忘录Memento中有两个接口，其中Caretaker只能看到备忘录中的窄接口，它只能将备忘录传递给其他对象。
    Originator可以看到宽接口，允许它访问返回到先前状态的所有数据。
 Caretaker: 负责人。
    负责保存好备忘录，不能对备忘录的内容进行操作和访问，只能够将备忘录传递给其他对象。

优点
1、 给用户提供了一种可以恢复状态的机制。可以是用户能够比较方便地回到某个历史的状态。
2、 实现了信息的封装。使得用户不需要关心状态的保存细节。
缺点
消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。

适用场景
1、 需要保存一个对象在某一个时刻的状态或部分状态。
2、 如果用一个接口来让其他对象得到这些状态，将会暴露对象的实现细节并破坏对象的封装性，
    一个对象不希望外界直接访问其内部状态，通过负责人可以间接访问其内部状态。